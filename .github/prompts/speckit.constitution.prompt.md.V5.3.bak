# command: /speckit.constitution
# short: Create or update project principles and memory system
# description: >
#   This command performs two critical actions:
#   1. Generates the `constitution.md` file based on your spec-md "Project Rules".
#   2. Initializes the complete "Four-in-One" AI Assistant Memory system structure (`ai_assistant_memory`).
#   [V5.1-Merged spec-md 融合版 + 一致性传播机制]
# @raycast.schemaVersion 1
# @raycast.title speckit.constitution
# @raycast.mode fullOutput
# @raycast.argument1 { "type": "text", "placeholder": "Describe your project principles (基于 spec-md 项目规则)..." }
# @raycast.icon 📜
# @raycast.packageName spec-kit
# @raycast.author Den Delimarsky
# @raycast.authorURL https://github.com/localden
# @raycast.author John Lam
# @raycast.authorURL https://github.com/jflam

# Phase 1: 📜 Shell Script Execution (Initializing Constitution & Memory System)
# This script will:
# 1. Run the standard spec-kit script to create the feature branch and `constitution.md`.
# 2. [V5 注入] Create the "Four-in-One" AI memory directory structure.
# 3. [V5 注入] Copy the master `memory-system-readme.md` template into the new memory system.

#!/bin/bash
set -e

# Load common functions and variables
# IMPORTANT: Adjust this path if your script is in a different location relative to common.sh
source "$(dirname "$0")/../../.specify/scripts/common.sh"

# 1. --- [原始逻辑保留] Standard spec-kit script ---
# This script creates the feature branch, sets up $FEATURE_DIR,
# and creates the initial specs/$FEATURE_DIR/constitution.md file.
bash "$(dirname "$0")/../../.specify/scripts/create-new-feature.sh" \
  --feature-name "constitution" \
  --summary "Establish project constitution and memory system" \
  --skip-pr \
  --auto-checkout \
  --allow-empty-description \
  --description "$1"

# --- [V5 spec-md 融合注入] 开始 ---

# 2. --- Initialize "Four-in-One" AI Assistant Memory Structure ---
echo "Initializing 'Four-in-One' AI Assistant Memory structure..."

# Define memory system path
# 我们将记忆库放在项目根目录，而不是 specs/ 目录中，以便于访问
MEMORY_ROOT="ai_assistant_memory"
MEMORY_ROOT_README="$MEMORY_ROOT/README.md"

# 路径修正：模板位于 .specify/templates/
MEMORY_TEMPLATE_PATH=".specify/templates/memory-system-readme.md"

# Create root folder
mkdir -p "$MEMORY_ROOT"

# Create the Four Tiers
mkdir -p "$MEMORY_ROOT/docs/global"
mkdir -p "$MEMORY_ROOT/docs/components"
mkdir -p "$MEMORY_ROOT/.context"
mkdir -p "$MEMORY_ROOT/logs"
mkdir -p "$MEMORY_ROOT/work_package_archives"

echo "Memory system directory structure created at '$MEMORY_ROOT'."

# 3. --- Deploy Memory System Blueprint (README) ---
# 将我们蒸馏好的通用模板复制到记忆库根目录，作为"活索引"
if [ -f "$MEMORY_TEMPLATE_PATH" ]; then
  cp "$MEMORY_TEMPLATE_PATH" "$MEMORY_ROOT_README"
  echo "Deployed 'memory-system-readme.md' to '$MEMORY_ROOT_README'."
else
  echo "WARNING: Master memory template not found at '$MEMORY_TEMPLATE_PATH'. Skipping deployment."
fi

# --- [V5 spec-md 融合注入] 结束 ---

echo "Constitution and AI Memory System initialization complete."
echo "FEATURE_DIR=$FEATURE_DIR"

# Phase 2: 🧠 AI Task (Populating the Constitution & Ensuring Consistency)

**致 AI 助手 (Copilot/Trae)：**

你现在将执行一项**五重任务**：**1. 审查** → **2. 填充** → **3. 一致性传播检查** → **4. 同步影响记录** → **5. 最终验证**。

## 1. 审查 (Review)

Shell 脚本已执行完毕。你**必须**首先确认以下文件和目录结构**已在项目根目录被成功创建**：

* `specs/$FEATURE_DIR/constitution.md` (这是你的主要目标文件)
* `ai_assistant_memory/` (AI 辅助记忆库根目录)
* `ai_assistant_memory/README.md` (记忆库蓝图，即 'memory-system-readme.md' 的副本)
* `ai_assistant_memory/docs/`
* `ai_assistant_memory/.context/`
* `ai_assistant_memory/logs/`
* `ai_assistant_memory/work_package_archives/`

## 2. 填充 (Populate)

你的核心任务是填充 `specs/$FEATURE_DIR/constitution.md` 文件。

**[V5 spec-md 融合指令]**
`constitution.md` 文件在我们的 `spec-md` 体系中，对应的是**"项目规则 (Project Rules)"**，即你（AI 执行者）在本项目中必须遵守的核心行为准则。

**禁止：** **不要**使用"Gemini 监工原则"或"协作原则"，那些是给战略 AI (Gemini) 的。
**执行：** 你必须将用户的提示（`$1`）——即我们的**"Trae 项目规则"**——提炼并格式化后，填入 `specs/$FEATURE_DIR/constitution.md` 文件中。

**请执行以下操作：**

1. **读取用户输入：**
   ```
   {{.Argument1}}
   ```
2. **分析并撰写：** 将上述用户输入（即"项目规则"）的内容，以清晰、结构化的 Markdown 格式，**写入并覆盖**到 `specs/$FEATURE_DIR/constitution.md` 文件中。

## 3. 一致性传播检查 (Consistency Propagation Check)

**[融合自原始 spec-kit 经验逻辑]**

在你完成 `constitution.md` 的填充后，你**必须**执行以下一致性传播检查，以确保项目规则的变更不会导致其他文件失去同步：

### 3.1 模板文件检查

**检查以下模板文件**（如果存在），确认它们与新的 constitution 规则保持一致：

* `.specify/templates/plan-template.md` - 检查是否有"Constitution Check"或规则引用
* `.specify/templates/spec-template.md` - 检查范围/需求对齐
* `.specify/templates/tasks-template.md` - 检查任务分类是否反映新原则
* `AWP-template.md` (如果存在于项目根目录或 `.specify/templates/`) - 检查自主工作包模板的规则对齐

### 3.2 命令文件检查

**检查 `.specify/templates/commands/*.md`** 或 `.github/prompts/*.md` 中的其他命令文件：
* 验证是否有过时的引用（例如：仅针对特定AI助手的名称）
* 确保通用指导已更新

### 3.3 文档检查

**检查项目文档**：
* `README.md` - 检查是否引用了已变更的原则
* `docs/` 目录下的相关文档
* **`ai_assistant_memory/README.md`** (新创建的记忆库蓝图) - 确认与 constitution 的协调性

### 3.4 检查输出

**你必须**报告以下内容：
* ✅ **已检查且无需更新**的文件列表
* ⚠️ **可能需要人工审查**的文件列表（说明原因）
* ❌ **明确需要更新**的文件列表（说明不一致之处）

## 4. 同步影响记录 (Sync Impact Record)

**[融合并简化自原始 Sync Impact Report 逻辑]**

在你完成一致性检查后，你**必须**生成一份**变更摘要报告**，向用户说明：

### 4.1 变更摘要

* **Constitution 文件路径**：`specs/$FEATURE_DIR/constitution.md`
* **主要变更内容**：（简要描述用户输入的核心原则）
* **记忆库状态**：✅ 已初始化 `ai_assistant_memory/` 四位一体结构

### 4.2 影响范围

列出**可能受影响的文件**：
* 模板文件：[列出在步骤3中识别的文件]
* 文档文件：[列出需要审查的文档]
* 命令文件：[列出需要审查的命令]

### 4.3 后续行动建议

* **立即执行**：（如果有明确需要更新的文件）
* **建议审查**：（如果有需要人工判断的文件）
* **建议 commit 信息**：`docs: establish constitution and init memory system (V5.1-Merged)`

## 5. 最终验证 (Final Validation)

**[融合自原始验证步骤]**

在你准备结束任务前，你**必须**执行以下最终验证：

### 5.1 Constitution 文件验证

* ✅ `specs/$FEATURE_DIR/constitution.md` 已成功创建
* ✅ 文件内容结构清晰、格式正确
* ✅ 无未处理的占位符或错误标记
* ✅ 内容符合 spec-md "项目规则"的定位

### 5.2 记忆库结构验证

* ✅ `ai_assistant_memory/` 根目录已创建
* ✅ 四个子目录已创建：`docs/`, `.context/`, `logs/`, `work_package_archives/`
* ✅ `ai_assistant_memory/README.md` 已从模板正确部署

### 5.3 最终报告

**你必须**向用户提交一份最终确认声明：

```
✅ 任务完成确认：
- Constitution 文件：specs/$FEATURE_DIR/constitution.md ✅
- 记忆库结构：ai_assistant_memory/ ✅
- 一致性检查：已完成 ✅
- 同步影响记录：已生成 ✅

[在此处附上步骤4的"同步影响记录"内容]
```

---

**执行格式要求**：

* 使用 Markdown 格式输出所有报告
* 保持清晰的章节层次
* 使用 ✅ ⚠️ ❌ 符号标记状态
* 提供具体的文件路径和变更说明
